NAME
    runnerutils - utilities for runners under python

DESCRIPTION
    A toolkit to abstract away most of the common drudgery associated with
    creating scripts or runners. The mainstay is the class RunnerBase which
    allows you to inherit this functionality into your own runner class.

PYRUN
    This script allows you to instantiate and run a runner class that is
    installed in a package. Just specify the fully qualified path on the
    command line:
        pyrun [pyrun options] package_name.MyRunnerClass [MyRunnerClass options]

RUNNERBASE USAGE
    self.options()

        This is required to be defined in your subclass in order to use
        self.parse_args(). This function must return a list of option
        definitions. An option definition is a dict that contains any kwargs
        that might have been sent on to an OptionParser.add_option() call. The
        only addition is the 'triggers' keyword, which must be a list of the
        commandline args/triggers that will cause the action to occur. e.g.

            def options(self):
                return [
                    { 'triggers': ['--help','-?','-h'],
                        'action': 'store_true',
                          'dest': 'help',
                          'help': 'Display the help message',
                    }
                ]

    self.parse_args(args=sys.argv)

        Takes a list of arguments, and parses them using OptionParser + the
        options specified in self.options(). self.options() must exist for this
        to work correctly. All of the values of the options that are returned,
        are merged into the existing attributes on your subclass instance.
        WARNING: These values *will* clobber existing values. sys.argv is the
        default if nothing is passed in.

    self.create_parser()

        This is meant to be used internally most of the time, but it is exposed
        so that people can do whatever they need to with it. This will raise a
        RunnerError if self.options() doesn't exist. This will also grab a dict
        from self.parser_opts() (if it exists) and pass it on to the
        OptionParser() as kwargs during creation.

EXAMPLES
    RunnerBase Example:

        from runnerutils import RunnerBase

        class MyRunner(RunnerBase):
            def options(self):
                return [
                    {   'triggers': ['--opt1','-1'],
                          'action': 'append',
                            'dest': 'option1',
                            'help': 'Option #1',
                         'metavar': 'ARG',
                    },
                    {   'triggers': ['--opt2','-2'],
                          'action': 'store',
                            'dest': 'option2',
                         'default': None,
                            'help': 'Option 2?',
                    },
                ]
            def __init__(self):
                self.parse_args(args)
                if self.option2 is None:
                    raise Exception("Option #2 is required!")

LICENSE
    Copyright (c) 2010 Brandon Sandrowicz under MIT License

AUTHOR
    Brandon Sandrowicz <brandon@sandrowicz.org>
